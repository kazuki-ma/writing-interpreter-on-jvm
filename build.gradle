buildscript {
    ext.kotlin_version = '1.2.51'

    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.2'
        classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE'
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE'
        classpath 'io.franzbecker:gradle-lombok:1.6'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'idea'

group = ''
version = '1.0.0-SNAPSHOT'

subprojects {
    repositories {
        mavenCentral();
    }

    apply plugin: 'com.github.spotbugs'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'io.franzbecker.gradle-lombok'

    if (new File("${project.rootDir}/.git").exists()) {
        logger.info("There's .git directory. Create git.properties.")
        apply plugin: 'com.gorylenko.gradle-git-properties'
    } else {
        logger.warn("There's no .git directory. Can't create git.properties.");
    }
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = targetCompatibility = 1.8

    group = rootProject.group
    version = rootProject.version

    ext['guava.version'] = '25.1-jre'
    ext['okhttp3.version'] = '3.10.0'

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:Brussels-SR10'
        }

        dependencies {
            dependency 'com.github.stefanbirkner:system-rules:1.18.0'
            dependency 'com.squareup.okhttp3:logging-interceptor:' + ext['okhttp3.version']
            dependency 'com.squareup.okhttp3:mockwebserver:' + ext['okhttp3.version']
            dependency 'com.squareup.retrofit2:converter-jackson:2.4.0'
            dependency 'com.squareup.retrofit2:retrofit:2.4.0'
            dependency 'org.assertj:assertj-core:3.10.0'
            dependency 'org.projectlombok:lombok:1.18.0'
        }
    }

    dependencies {
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

        testCompile 'com.google.guava:guava'
        testCompile 'com.github.stefanbirkner:system-rules'
        testCompile 'com.squareup.okhttp3:mockwebserver'
        testCompile 'org.hibernate:hibernate-validator'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.springframework.boot:spring-boot-starter-logging'
    }

    jar {
        manifest {
            attributes 'Implementation-Title': project.name,
                'Implementation-Version': version
        }
    }

    lombok {
        version = '1.18.2'
    }

    if (!project.name.startsWith('sample-')) {
        task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {
            ext.outputDir = file("$buildDir/delombok")
            outputs.dir(outputDir)
            sourceSets.main.java.srcDirs.each {
                inputs.dir(it)
                args(it, "-d", outputDir)
            }
        }

        javadoc {
            dependsOn delombok
            source = delombok.outputDir
            options.locale = 'en_US'
            options.addStringOption('Xdoclint:none', '-quiet')
            // To create javadoc for generated method&constructor, delombok & run javadoc on delombok.outputDir.
        }

        task javadocJar(type: Jar, dependsOn: 'javadoc') {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        task sourcesJar(type: Jar, dependsOn: 'classes') {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }
    }

    checkstyle {
        configProperties = [projectDir: rootProject.projectDir]
    }

    compileJava {
        options.compilerArgs << '-Xlint:all' << '-Xlint:deprecation' << '-Werror' << '-Xlint:-processing' << '-parameters'
    }
}
